[build-system]
requires = ["setuptools>=65.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "voicebridge"
version = "1.0.0"
description = "Real-time speech-to-text API for accessibility"
authors = [
    {name = "Fatma Karaca Erdogan", email = "fatmakaracaerdogan@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
  | frontend
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "tests"]
known_third_party = ["fastapi", "uvicorn", "pydantic", "websockets", "celery", "redis", "kafka", "mlflow", "wandb", "prometheus", "grpc", "openai", "numpy", "pandas", "scikit-learn", "tensorflow", "torch", "transformers"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["frontend/*", "node_modules/*", "build/*", "dist/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "node_modules",
    "frontend",
    ".venv",
    "venv",
    ".eggs",
    "*.egg-info"
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101"
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "speech_recognition.*",
    "websockets.*",
    "kafka.*",
    "confluent_kafka.*",
    "grpc.*",
    "protobuf.*",
    "mlflow.*",
    "wandb.*",
    "prometheus_client.*",
    "celery.*",
    "redis.*",
    "pymongo.*",
    "mysql.*",
    "transformers.*",
    "torch.*",
    "tensorflow.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
    "--durations=10"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "websocket: WebSocket tests",
    "ml: Machine learning tests",
    "api: API endpoint tests",
    "slow: Slow running tests",
    "requires_api: Tests that require external API keys"
]
asyncio_mode = "auto"
timeout = 300
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:websockets",
    "ignore::UserWarning:asyncio"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/node_modules/*",
    "*/frontend/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests", "frontend", "node_modules"]
skips = ["B101", "B601"]

[tool.safety]
output = "json"
