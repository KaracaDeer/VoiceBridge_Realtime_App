name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false
      max-parallel: 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Clear Python cache
      run: |
        sudo rm -rf /opt/hostedtoolcache/Python
        sudo rm -rf /usr/local/lib/python*
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
      continue-on-error: false
        
    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check src tests
      continue-on-error: true
        
    - name: Check import sorting with isort
      run: |
        isort --check-only src tests
      continue-on-error: true
        
    - name: Type checking with mypy
      run: |
        mypy src --ignore-missing-imports --no-strict-optional
      continue-on-error: true
        
    - name: Run unit tests
      run: |
        pytest tests/test_api.py tests/test_simple_startup.py --maxfail=1 --disable-warnings -v --tb=short
      continue-on-error: true
        
    # - name: Run startup test
    #   run: |
    #     python tests/test_simple_startup.py
        
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json || true
        
    - name: Check for known security vulnerabilities
      run: |
        safety check --json || true

  docker:
    runs-on: ubuntu-latest
    # needs: test  # Make docker job independent
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t voicebridge:test -f deployment/docker/Dockerfile .
        
    - name: Test Docker image
      run: |
        docker run --rm voicebridge:test python --version

  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend tests
      run: |
        cd frontend
        CI=true npm test -- --coverage --watchAll=false --passWithNoTests --verbose
      continue-on-error: true
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      continue-on-error: true