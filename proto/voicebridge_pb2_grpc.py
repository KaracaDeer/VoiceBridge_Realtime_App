# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc
import voicebridge_pb2 as voicebridge__pb2

GRPC_GENERATED_VERSION = "1.69.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in voicebridge_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class AudioStreamingServiceStub(object):
    """Audio streaming service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamAudio = channel.stream_stream(
            "/voicebridge.AudioStreamingService/StreamAudio",
            request_serializer=voicebridge__pb2.AudioChunk.SerializeToString,
            response_deserializer=voicebridge__pb2.TranscriptionResult.FromString,
            _registered_method=True,
        )
        self.GetTranscriptionStatus = channel.unary_unary(
            "/voicebridge.AudioStreamingService/GetTranscriptionStatus",
            request_serializer=voicebridge__pb2.TranscriptionRequest.SerializeToString,
            response_deserializer=voicebridge__pb2.TranscriptionStatusResponse.FromString,
            _registered_method=True,
        )
        self.HealthCheck = channel.unary_unary(
            "/voicebridge.AudioStreamingService/HealthCheck",
            request_serializer=voicebridge__pb2.HealthRequest.SerializeToString,
            response_deserializer=voicebridge__pb2.HealthResponse.FromString,
            _registered_method=True,
        )


class AudioStreamingServiceServicer(object):
    """Audio streaming service"""

    def StreamAudio(self, request_iterator, context):
        """Stream audio data for real-time transcription"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTranscriptionStatus(self, request, context):
        """Get transcription status"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HealthCheck(self, request, context):
        """Health check"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AudioStreamingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StreamAudio": grpc.stream_stream_rpc_method_handler(
            servicer.StreamAudio,
            request_deserializer=voicebridge__pb2.AudioChunk.FromString,
            response_serializer=voicebridge__pb2.TranscriptionResult.SerializeToString,
        ),
        "GetTranscriptionStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetTranscriptionStatus,
            request_deserializer=voicebridge__pb2.TranscriptionRequest.FromString,
            response_serializer=voicebridge__pb2.TranscriptionStatusResponse.SerializeToString,
        ),
        "HealthCheck": grpc.unary_unary_rpc_method_handler(
            servicer.HealthCheck,
            request_deserializer=voicebridge__pb2.HealthRequest.FromString,
            response_serializer=voicebridge__pb2.HealthResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("voicebridge.AudioStreamingService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("voicebridge.AudioStreamingService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class AudioStreamingService(object):
    """Audio streaming service"""

    @staticmethod
    def StreamAudio(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/voicebridge.AudioStreamingService/StreamAudio",
            voicebridge__pb2.AudioChunk.SerializeToString,
            voicebridge__pb2.TranscriptionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetTranscriptionStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/voicebridge.AudioStreamingService/GetTranscriptionStatus",
            voicebridge__pb2.TranscriptionRequest.SerializeToString,
            voicebridge__pb2.TranscriptionStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def HealthCheck(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/voicebridge.AudioStreamingService/HealthCheck",
            voicebridge__pb2.HealthRequest.SerializeToString,
            voicebridge__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class TextStreamingServiceStub(object):
    """Real-time text streaming service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamText = channel.stream_stream(
            "/voicebridge.TextStreamingService/StreamText",
            request_serializer=voicebridge__pb2.TextStreamRequest.SerializeToString,
            response_deserializer=voicebridge__pb2.TextStreamResponse.FromString,
            _registered_method=True,
        )
        self.SubscribeToText = channel.unary_stream(
            "/voicebridge.TextStreamingService/SubscribeToText",
            request_serializer=voicebridge__pb2.TextSubscription.SerializeToString,
            response_deserializer=voicebridge__pb2.TextUpdate.FromString,
            _registered_method=True,
        )


class TextStreamingServiceServicer(object):
    """Real-time text streaming service"""

    def StreamText(self, request_iterator, context):
        """Stream text results to clients"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SubscribeToText(self, request, context):
        """Subscribe to text updates"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TextStreamingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StreamText": grpc.stream_stream_rpc_method_handler(
            servicer.StreamText,
            request_deserializer=voicebridge__pb2.TextStreamRequest.FromString,
            response_serializer=voicebridge__pb2.TextStreamResponse.SerializeToString,
        ),
        "SubscribeToText": grpc.unary_stream_rpc_method_handler(
            servicer.SubscribeToText,
            request_deserializer=voicebridge__pb2.TextSubscription.FromString,
            response_serializer=voicebridge__pb2.TextUpdate.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("voicebridge.TextStreamingService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("voicebridge.TextStreamingService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class TextStreamingService(object):
    """Real-time text streaming service"""

    @staticmethod
    def StreamText(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/voicebridge.TextStreamingService/StreamText",
            voicebridge__pb2.TextStreamRequest.SerializeToString,
            voicebridge__pb2.TextStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SubscribeToText(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/voicebridge.TextStreamingService/SubscribeToText",
            voicebridge__pb2.TextSubscription.SerializeToString,
            voicebridge__pb2.TextUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class AudioProcessingServiceStub(object):
    """Audio processing service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessAudioChunk = channel.unary_unary(
            "/voicebridge.AudioProcessingService/ProcessAudioChunk",
            request_serializer=voicebridge__pb2.AudioChunk.SerializeToString,
            response_deserializer=voicebridge__pb2.ProcessingResult.FromString,
            _registered_method=True,
        )
        self.BatchProcessAudio = channel.stream_stream(
            "/voicebridge.AudioProcessingService/BatchProcessAudio",
            request_serializer=voicebridge__pb2.AudioChunk.SerializeToString,
            response_deserializer=voicebridge__pb2.ProcessingResult.FromString,
            _registered_method=True,
        )
        self.GetProcessingStats = channel.unary_unary(
            "/voicebridge.AudioProcessingService/GetProcessingStats",
            request_serializer=voicebridge__pb2.StatsRequest.SerializeToString,
            response_deserializer=voicebridge__pb2.ProcessingStats.FromString,
            _registered_method=True,
        )


class AudioProcessingServiceServicer(object):
    """Audio processing service"""

    def ProcessAudioChunk(self, request, context):
        """Process audio chunk"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchProcessAudio(self, request_iterator, context):
        """Batch process audio"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetProcessingStats(self, request, context):
        """Get processing statistics"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AudioProcessingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ProcessAudioChunk": grpc.unary_unary_rpc_method_handler(
            servicer.ProcessAudioChunk,
            request_deserializer=voicebridge__pb2.AudioChunk.FromString,
            response_serializer=voicebridge__pb2.ProcessingResult.SerializeToString,
        ),
        "BatchProcessAudio": grpc.stream_stream_rpc_method_handler(
            servicer.BatchProcessAudio,
            request_deserializer=voicebridge__pb2.AudioChunk.FromString,
            response_serializer=voicebridge__pb2.ProcessingResult.SerializeToString,
        ),
        "GetProcessingStats": grpc.unary_unary_rpc_method_handler(
            servicer.GetProcessingStats,
            request_deserializer=voicebridge__pb2.StatsRequest.FromString,
            response_serializer=voicebridge__pb2.ProcessingStats.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("voicebridge.AudioProcessingService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("voicebridge.AudioProcessingService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class AudioProcessingService(object):
    """Audio processing service"""

    @staticmethod
    def ProcessAudioChunk(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/voicebridge.AudioProcessingService/ProcessAudioChunk",
            voicebridge__pb2.AudioChunk.SerializeToString,
            voicebridge__pb2.ProcessingResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def BatchProcessAudio(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/voicebridge.AudioProcessingService/BatchProcessAudio",
            voicebridge__pb2.AudioChunk.SerializeToString,
            voicebridge__pb2.ProcessingResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetProcessingStats(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/voicebridge.AudioProcessingService/GetProcessingStats",
            voicebridge__pb2.StatsRequest.SerializeToString,
            voicebridge__pb2.ProcessingStats.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
